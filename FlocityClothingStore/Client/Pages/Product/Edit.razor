@page "/product/edit/{ProductId:int}"
@using FlocityClothingStore.Shared.Models.Product
@using FlocityClothingStore.Shared.Models.Category
@inject HttpClient http
@inject NavigationManager navigation

<h3>Edit Product: @model.Name</h3>

@if (errorMessage != null)
{
    <h5 class="text-danger">@errorMessage</h5>
}
<div class="container">
    <EditForm Model="@model" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="model.Name" />
        </div>
        <div class="form-group">
            <label>Description</label>
            <InputText class="form-control" @bind-Value="model.Description" />
        </div>
        <div class="form-group">
            <label>Price</label>
            <InputNumber class="form-control" @bind-Value="model.Price" />
        </div>
        <div class="form-group">
            <label>CategoryId</label>
            <InputNumber class="form-control" @bind-Value="model.CategoryId" />
        </div>
        <div class="form-group">
            <label>Size</label>
            <div class="col-sm-10">
                <InputSelect class="form-control" @bind-Value="model.Size">
                    <option value="">Pick a size</option>
                    <option value="S">S</option>
                    <option value="M">M</option>
                    <option value="L">L</option>
                </InputSelect>
            </div>
        </div>
         <button type="submit" class="btn btn-primary btn-block mt-5">Submit</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int ProductId { get; set; }
    private ProductEdit model = new();
    private IEnumerable<CategoryListItem> categories;
    private string errorMessage;
    protected override async Task OnInitializedAsync()
    {
        model = await http.GetFromJsonAsync<ProductEdit>($"/api/product/{ProductId}");
        categories = await http.GetFromJsonAsync<IEnumerable<CategoryListItem>>("/api/category/");

    }
    private async void HandleSubmit()
    {
        var createRes = await http.PutAsJsonAsync<ProductEdit>($"/api/product/edit/{ProductId}", model);
        if (createRes.IsSuccessStatusCode)
        {
            navigation.NavigateTo($"/product/{ProductId}");
        }
        else
        {
            errorMessage = "Product could not be updated right now, please try again later.";
        }
    }
}
